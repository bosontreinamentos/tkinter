Tarefa:

1. Refatorar o código do banco Floricultura
- Transformar código de blocos isolados em funções
a. Escreva uma função para refatorar a criação das tabelas
b. Escreva uma função que teste se as tabelas foram criadas
c. Escreva uma função para refatorar a inserção de registros na tabela de clientes
d. Escreva uma função para refatorar a inserção de registros na tabela de produtos
e. Escreva uma função para refatorar a inserção de registros na tabela de vendas

2. Testar as funções criadas, uma a uma ("teste unitário"), registrando os testes na planilha de Testes de Software (pré-condições, resultado esperado, resultado obtido, nome da função ou funcionalidade testada, etc.)

# Refatoração: resolução sugerida

import sqlite3 as con

def criar_tabelas():
    sql_clientes = '''
    CREATE TABLE IF NOT EXISTS Cliente (
    ID_Cliente INTEGER PRIMARY KEY AUTOINCREMENT,
    RG VARCHAR (12) NOT NULL,
    Nome_Cliente VARCHAR(30) NOT NULL,
    Sobrenome_Cliente VARCHAR(40),
    Telefone VARCHAR(12),
    Rua VARCHAR(40),
    Numero VARCHAR(5),
    Bairro VARCHAR(25)
    );
    '''
    sql_produtos = '''
    CREATE TABLE IF NOT EXISTS Produto (
    ID_Produto INTEGER PRIMARY KEY AUTOINCREMENT,
    Nome_Produto VARCHAR (30) NOT NULL,
    Tipo_Produto VARCHAR (25) NOT NULL,
    Preco DECIMAL(10,2) NOT NULL,
    Qtde_Estoque SMALLINT NOT NULL
    );
    '''
    sql_vendas = '''
    CREATE TABLE IF NOT EXISTS Venda (
    ID_Transacao INTEGER PRIMARY KEY AUTOINCREMENT,
    Nota_Fiscal SMALLINT NOT NULL,
    ID_Cliente INTEGER NOT NULL,
    Data_Compra DATETIME,
    ID_Produto INTEGER NOT NULL,
    Quantidade SMALLINT NOT NULL,
    FOREIGN KEY (ID_Cliente) REFERENCES Cliente(ID_Cliente),
    FOREIGN KEY (ID_Produto) REFERENCES Produto(ID_Produto)
    );
    '''
    try:
        conexao = con.connect('floricultura.db')
        cursor = conexao.cursor()
        cursor.execute(sql_clientes)
        cursor.execute(sql_produtos)
        cursor.execute(sql_vendas)
        conexao.commit()
    except con.DatabaseError as erro:
        print("Erro no banco de dados", erro)
    finally:
        if conexao:
            conexao.close()

def inserir_dados_clientes():
    insere_cliente = '''
    INSERT INTO Cliente (RG, Nome_Cliente, Sobrenome_Cliente, Telefone, Rua, Numero, Bairro)
    VALUES
    ('265356325', 'Fábio', 'dos Reis', '1156326356', 'Rua do Orfanato', '235', 'Vila Prudente'),
    ('268653215', 'João', 'Cavutto', '1178563214', 'Rua do Oratório', '1957', 'Mooca'),
    ('289632457', 'Julia', 'Tamashiro', '1196323654', 'Rua Lorenzo da Viterbo', '365', 'Vila Moraes');
    '''
    try:
        conexao = con.connect('floricultura.db')
        cursor = conexao.cursor()
        cursor.execute(insere_cliente)
        conexao.commit()
    except con.DatabaseError as erro:
        print("Erro no banco de dados", erro)
    finally:
        if conexao:
            conexao.close()

def inserir_dados_produtos():
    insere_produto = '''
    INSERT INTO Produto (Nome_Produto, Tipo_Produto, Preco, Qtde_Estoque)
    VALUES
    ('Orquídea', 'Flor', 55.50, 25),
    ('Azaléa', 'Flor', 35.63, 15),
    ('Terra Vegetal', 'Insumo', 72.50, 20),
    ('Jardineira', 'Vaso', 15.50, 18);
    '''
    try:
        conexao = con.connect('floricultura.db')
        cursor = conexao.cursor()
        cursor.execute(insere_produto)
        conexao.commit()
    except con.DatabaseError as erro:
        print("Erro no banco de dados", erro)
    finally:
        if conexao:
            conexao.close()

def inserir_dados_vendas():
    insere_venda = '''
    INSERT INTO Venda (Nota_Fiscal, ID_Cliente, Data_Compra, ID_Produto, Quantidade)
    VALUES
    (123, 1, '2024-04-04', 1, 3),
    (123, 1, '2024-04-04', 2, 2),
    (124, 3, '2024-03-28', 2, 5),
    (124, 3, '2024-04-03', 3, 2),
    (124, 3, '2024-03-30', 4, 3);
    '''
    try:
        conexao = con.connect('floricultura.db')
        cursor = conexao.cursor()
        cursor.execute(insere_venda)
        conexao.commit()
    except con.DatabaseError as erro:
        print("Erro no banco de dados", erro)
    finally:
        if conexao:
            conexao.close()            

# Executar as funções criadas
criar_tabelas()
inserir_dados_clientes()
inserir_dados_produtos()
inserir_dados_vendas()


# Consulta de teste
conexao = con.connect('floricultura.db')
cursor = conexao.cursor()

consulta = 'SELECT Nome_Cliente FROM Cliente;'

res = cursor.execute(consulta)
print('Cliente:\n')
for linha in res.fetchall():
    print(f'{linha[0]}')
conexao.close()
